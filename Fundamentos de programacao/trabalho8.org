* Problema 1
  #+begin_src python
qtd,v=input().split()
qtd,v=int(qtd),float(v)

def arrecadacao(x,v_ingresso):
    if x==0:
        f=-100000
    elif x!=0 and x%2==0:
        f=x+arrecadacao(x-100,v_ingresso)
    else:
        f=v_ingresso+arrecadacao(x-100,v_ingresso)
    return f
v_final=arrecadacao(qtd,v)
currency = "{:,}".format(v_final)
cur=currency.replace(",",".")
print("R$ "+cur+",00")
  #+end_src
* Problema 2
  #+begin_src python
def soma_lista_rec(L):
    soma = 0
    for item in L:
        if not isinstance(item, list):
            soma += item
        else:
            soma += soma_lista_rec(item)
    return soma
  #+end_src
* Problema 3
  #+begin_src python
def g(N):
    soma = 0
    for i in str(N):
        soma += int(i)
    if len(str(soma)) == 1:
        return soma
    else:
        return g(soma)
  #+end_src
* Problema 4
  #+begin_src python
qtd_moedas,d=input().split()
qtd_moedas,d=int(qtd_moedas),int(d)
qtd_casos=2**qtd_moedas
def fibo(quantidade_moedas):
    m=[]
    for i in range(quantidade_moedas):
        v=[0]*(quantidade_moedas+1)
        m.append(v)
    m[0][0]=1
    m[0][1]=1

    for i in range(len(m)):
        for j in range(len(m[i])):
            if j==0:
                m[i][j]=1
            elif i!=0 and j!=0:
                m[i][j]=m[i-1][j]+m[i-1][j-1]
    return m[len(m)-1]
fibs=fibo(qtd_moedas)
if qtd_moedas%2==1:
    for i in range(0,qtd_moedas):
        a=qtd_moedas-2*i
        if d==a:
            print(2*fibs[i])
            break
        elif d%2==0:
            print(0)
            break
else:

    for i in range(0,qtd_moedas):
        a=qtd_moedas-2*i
        if d==a:
            print(2*fibs[i])
            break
        elif d==0:
            print(fibs[len(fibs)//2])
            break
        elif d%2==1:
            print(0)
            break
  #+end_src
* Problema 5
  #+begin_src python
def print_dict_rec(D,level=0):
    tabs = '\t'*level
    for chave in list(D.keys()):
        if not isinstance(D[chave],dict):
            print('%s%s: %s' % (tabs, chave, str(D[chave])))
        else:
            print('%s%s: {' % (tabs, chave))
            print_dict_rec(D[chave],level+1)
            print('%s}' % tabs)

D = eval(input().strip())
print_dict_rec(D)
  #+end_src
* Problema 6
  #+begin_src python
def Seguro(tabuleiro, N, linha, coluna):
    
    #Verifica se ocorre ataque na linha
    for i in range(N):
        if tabuleiro[linha][i]:
            return False
    
    #Verifica se ocorre ataque na coluna
    for i in range(N):
        if tabuleiro[i][coluna]:
            return False

    #Verifica se ocorre ataque na diagonal principal acima e abaixo
    for i,j in zip(range(linha,-1,-1),range(coluna,-1,-1)):
        if tabuleiro[i][j]:
            return False
    for i,j in zip(range(linha, N, 1),range(coluna, N, 1)):
        if tabuleiro[i][j]:
            return False

    #Verifica se ocorre ataque na diagonal secundária acima e abaixo
    for i,j in zip(range(linha,-1,-1),range(coluna, N, 1)):
        if tabuleiro[i][j]:
            return False
    for i,j in zip(range(linha, N, 1),range(coluna,-1,-1)):
        if tabuleiro[i][j]:
            return False
    #Se chegou aqui, então está seguro (retorna true)
    return True
def Executar(tabuleiro, N, coluna, solucao = 0):
  
    if coluna == N:
        solucao += 1
        return solucao
    
    for i in range(N):
        #Verifica se é seguro colocar a rainha naquela coluna
        if Seguro(tabuleiro, N, i, coluna):
            #Insere a rainha (marca com 1)
            tabuleiro[i][coluna] = 1
            #Chamada recursiva
            solucao = Executar(tabuleiro, N, coluna + 1, solucao)
            #Remove a rainha (backtracking)
            tabuleiro[i][coluna] = 0
    return solucao


def tabuleiro_rainhas(N):
    
    #Gerando tabuleiro
    tabuleiro = []
    
    for i in range(N):
        tabuleiro.append([0]*N)
    
    return Executar(tabuleiro, N, 0)


n = int(input())

print(tabuleiro_rainhas(n))
  #+end_src
* Problema 7
  #+begin_src python
def quantidade(l, c, M, pixels_nao_verificados=[], pixels_verificados=[]):
    for i in range(-1,2):
        for j in range(-1,2):
            if (l+i) in range(len(M)) and (c+j) in range(len(M[l+i])):
                if  M[l][c] == M[l+i][c+j] and \
                    [l+i,c+j] not in pixels_nao_verificados and \
                    [l+i,c+j] not in pixels_verificados:
                    
                    pixels_nao_verificados.append([l+i,c+j])
                    
    pixels_nao_verificados.remove([l,c])
    pixels_verificados.append([l,c])

    if len(pixels_nao_verificados):
        quantidade(pixels_nao_verificados[0][0],pixels_nao_verificados[0][1],M,pixels_nao_verificados,pixels_verificados)
        
    return len(pixels_verificados)
  #+end_src
* Problema 8
  #+begin_src python
def Search(i,j,k,word,Used):
    Used.append([i,j])
    if k == len(word):
        return True
    else: 
        if matriz[i-1][j] == word[k] and ([i-1,j] not in Used):
            if Search(i-1, j, k+1,word, Used):
                return True
        if matriz[i][j-1] == word[k] and ([i,j-1] not in Used):
            if Search(i, j-1, k+1,word, Used):
                return True
        if matriz[i][j+1] == word[k] and ([i,j+1] not in Used):
            if Search(i, j+1, k+1,word, Used):
                return True
        if matriz[i+1][j] == word[k] and ([i+1,j] not in Used):
            if Search(i+1, j, k+1,word, Used):
                return True
    Used.clear()   
n, m = input().split()
n, m = int(n), int(m)
matriz = []
busca = []
Used = []
for i in range(n):
    matriz.append(input().split())
matriz.insert(0,[0]*m)
matriz.append([0]*m)
for i in range(len(matriz)):
    matriz[i].insert(0, 0)
    matriz[i].append(0)
b = int(input())
for i in range(b):
    busca.append(input())
for pal in busca:
    a = 0
    for i in range(1,n+1):
        for j in range(1, m+1):
            if matriz[i][j] == pal[0] and a == 0:
                if Search(i, j, 1,pal, Used):
                    print('Sim')
                    a = 1
    if a == 0:
        print('Não')
    Used.clear()
  #+end_src
* Problema 9
  #+begin_src python
def serie_neymar(n):
    if(n <= 0 ):
        return "SEM RESPOSTA"
    if((n+1) % 2 == 0):
        return int(3 + (n-1)/2 + 4 * ((n-1) / 2))
    return int(3 + 2*n + n/2 - 1)
    
n = int(input())

print(serie_neymar(n))
  #+end_src
* Problema 10
  #+begin_src python
L,C = input().split()
L,C = int(L), int(C)

celulas = []

for x in range(L):
    celulas.append([int(i) for i in input().split()])

qdest = int(input())
    
dest = 0
if L%2==0:
    for linha in range(L):
        for coluna in range(C):
            if celulas[linha][coluna]==1 and dest<qdest:
                celulas[linha][coluna] = 0
                dest+=1
else:
    for coluna in range(C):
        for linha in range(L):
             if celulas[linha][coluna]==1 and dest<qdest:
                    celulas[linha][coluna] = 0
                    dest+=1
                    
qcel = 0
for linha in celulas:
    qcel += linha.count(1)
    print(*linha)

print((qdest-dest),qcel)
  #+end_src
